import pygame
import random
from opensimplex import OpenSimplex

width, height = 500, 500
square_size = 1

board = []
window = pygame.display.set_mode((width, height))

octaves = 1
thickness = 1
scale = 0.08
brightness = 200

dual_colour = True

colour_r = 50
colour_g = 50
colour_b = 50


def build_board():
    global board, octaves
    board = []
    gen_seed = int(random.randint(1, 1000))
    noise = OpenSimplex(gen_seed)
    row_count = 0

    while square_size * row_count in range(0, height):
        board.append([])
        row_count += 1
    print(f"{width // square_size},{row_count}")
    print(row_count * (width // square_size))
    col_count = 0
    row_count = col_count

    for row in board:
        while square_size * col_count in range(0, width):
            row.append(noise.noise2d(col_count * scale, row_count * scale) * thickness)
            col_count += 1
        row_count += 1
        col_count = 0
    col_count = 0
    row_count = 0
    while octaves > 0:
        gen_seed = int(random.randint(1, 1000))
        noise = OpenSimplex(gen_seed)
        for row in board:
            for col in row:
                col += noise.noise2d(col_count * scale, row_count * scale) * thickness
                col_count += 1
            row_count += 1
            col_count = 0
        octaves -= 1
        print(octaves)


def board_print():
    line = ""
    for row in board:
        for col in row:
            line += str(col)
        print(line)
        line = ""


def surface_build():
    display_surface = pygame.surface.Surface((width, height))
    display_surface.set_colorkey((0, 0, 0))
    square_surface = pygame.surface.Surface((square_size, square_size))
    row_count = 0
    col_count = 0

    for row in board:
        for col in row:
            if dual_colour:
                colour_val_r = colour_r + brightness * col
                colour_val_g = colour_g + brightness * col
                colour_val_b = colour_b + brightness * col
            else:
                colour_val_r = (colour_r + brightness) * col
                colour_val_g = (colour_g + brightness) * col
                colour_val_b = (colour_b + brightness) * col

            if colour_val_r > 255 or colour_val_r < -255:
                colour_val_r = 250

            if colour_val_g > 255 or colour_val_g < -255:
                colour_val_g = 250

            if colour_val_b > 255 or colour_val_b < -255:
                colour_val_b = 250

            if colour_val_r < 0:
                if dual_colour:
                    colour_val_r = abs(colour_r + brightness * col)
                else:
                    colour_val_r = abs((colour_r + brightness) * col)

            if colour_val_g < 0:
                if dual_colour:
                    colour_val_g = abs(colour_g + brightness * col)
                else:
                    colour_val_g = abs((colour_g + brightness) * col)

            if colour_val_b < 0:
                if dual_colour:
                    colour_val_b = abs(colour_b + brightness * col)
                else:
                    colour_val_b = abs((colour_b + brightness) * col)

            colour = (colour_val_r, colour_val_g, colour_val_b)
            # print(f"{colour_val_r} {colour_val_g} {colour_val_b}")
            square_surface.fill(colour)
            display_surface.blit(square_surface, (col_count, row_count))
            col_count += square_size
        row_count += square_size
        col_count = 0

    window.blit(display_surface, (0, 0))
    pygame.display.update()


def main_loop():
    pygame.display.set_caption("map gen")

    run = True

    build_board()

    surface_build()
    while run:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                break

    pygame.quit()


main_loop()
